{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","theme","contentType","subheadline","headlineLine1","headlineLine2","headlineLine3","headlineLine4","headlineLine5","headlineSize","displayLine","displayLineSize","displayLinePosition","callToAction","appStyle","placeholderBkg","backgroundImage","conditionalTextCheck","text","classList","textChild","props","children","e","className","heightStuff","el","maxLine","innerSpan","querySelector","elHeight","window","getComputedStyle","lineHeight","fontSize","limitHeight","parseFloat","data-headline-size","data-display-line-size","data-theme","style","data-width","data-height","data-text-type","ref","parseInt","paddingTop","paddingBottom","maxheight","maxHeight","defaultProps","Boolean","location","hostname","match","ReactDOM","render","StrictMode","templateProps","document","getElementById","temp","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3b83f41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./css/App.scss\";\r\nimport \"./css/theme1.scss\";\r\nimport \"./css/theme2.scss\";\r\nimport \"./css/theme3.scss\";\r\nimport \"./css/theme4.scss\";\r\n\r\n\r\nfunction App({\r\n  width, height, theme, contentType, subheadline, headlineLine1, headlineLine2, headlineLine3, headlineLine4, headlineLine5, headlineSize, displayLine, displayLineSize, displayLinePosition, callToAction}) {\r\n    \r\n    const appStyle = {\r\n      width: `${width}px`,\r\n      height: `${height}px`,\r\n    };\r\n\r\n    const placeholderBkg = {\r\n      backgroundImage: `url(https://cdn.jsdelivr.net/gh/OutfitDelivery/cloudera-digi-advert1-make-template@master/src/assets/Placeholder/Theme${theme}/${width/4}x${height/4}.png)`,\r\n    };\r\n\r\n    function conditionalTextCheck(text, classList){\r\n      classList += \" text-el\";\r\n      let textChild = text.props.children;\r\n      try{textChild = textChild.props.children} catch(e){}\r\n      return (textChild !== \"\" && textChild !== \"null\") ? (<div className={classList}>{text}</div>) : \"\";\r\n    }\r\n\r\n    function heightStuff(el, maxLine, name = null){\r\n      let innerSpan = el.querySelector(\"span\");\r\n      let elHeight = window.getComputedStyle(el).height;\r\n      let fontSize = innerSpan != null ? window.getComputedStyle(innerSpan).fontSize : window.getComputedStyle(el).fontSize;\r\n      let lineHeight = innerSpan != null ? window.getComputedStyle(innerSpan).lineHeight : window.getComputedStyle(el).lineHeight;\r\n      let limitHeight = parseFloat(lineHeight) * maxLine + (parseFloat(lineHeight) - 10);\r\n      if(parseFloat(elHeight) > limitHeight){\r\n        el.className = \"overflow\";\r\n      }\r\n\r\n      /*if(name == \"line2\"){\r\n        document.querySelector(\".console\").innerHTML += `Element Height: ${elHeight} <br> Limit Height: ${limitHeight} <br> Line Height: ${lineHeight} <br> Inner Span Bounding: ${innerSpan.getBoundingClientRect().height} <br> Inner Span CSS Computed: ${window.getComputedStyle(el).height}`;\r\n      }*/\r\n    }\r\n\r\n    function maxHeight(el){\r\n      if(!((width == 1280 && height == 200) || (width == 1200 && height == 200))){\r\n        let elHeight = parseInt(window.getComputedStyle(el).height) - parseInt(window.getComputedStyle(el).paddingTop) - parseInt(window.getComputedStyle(el).paddingBottom);\r\n        let maxheight = window.getComputedStyle(el).maxHeight;\r\n        if(parseInt(elHeight) >= parseInt(maxheight)){\r\n          el.className = \"overflow \" + \"text-area\";\r\n        }\r\n      }\r\n    }\r\n\r\n    function between (lower, upper) {\r\n      var scale = upper - lower + 1;\r\n      return Math.floor(lower + Math.random() * scale);\r\n    }\r\n\r\n    var htmlStructure = (\r\n      <div data-headline-size={headlineSize} data-display-line-size={displayLineSize}>\r\n      <div className=\"App\" data-theme={theme} style={appStyle}>\r\n        <div data-width={width/4} data-height={height/4}>\r\n            <div className=\"placeholder\" style={placeholderBkg}></div>\r\n            <div className=\"text-area\" data-theme={theme} data-text-type={contentType} ref={el=>maxHeight(el)}>\r\n            {conditionalTextCheck(<h2 ref={el=>{heightStuff(el, 3)}}>{subheadline}</h2>, \"subheadline\")}\r\n            {displayLinePosition === \"top\" ? conditionalTextCheck(<h3 ref={el=>{heightStuff(el, 1.4)}}>{displayLine}</h3>, \"display-line\") : \"\"}\r\n            <div className=\"heading\">\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1.4, \"line1\")}}><span>{headlineLine1}</span></h1>, \"headline line-1\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1.4, \"line2\")}}><span>{headlineLine2}</span></h1>, \"headline line-2\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1.4, \"line3\")}}><span>{headlineLine3}</span></h1>, \"headline line-3\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1.4, \"line4\")}}><span>{headlineLine4}</span></h1>, \"headline line-4\")}\r\n              {conditionalTextCheck(<h1 ref={el=>{heightStuff(el, 1.4, \"line5\")}}><span>{headlineLine5}</span></h1>, \"headline line-5\")}\r\n            </div>\r\n            {displayLinePosition === \"bottom\" ? conditionalTextCheck(<h3 ref={el=>{heightStuff(el, 1.4)}}>{displayLine}</h3>, \"display-line\") : \"\"}\r\n            {conditionalTextCheck(<p ref={el=>{heightStuff(el, 1)}}>{callToAction}</p>, \"call-to-action\")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  \r\n  return htmlStructure;\r\n}\r\n\r\nApp.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number, \r\n  theme: PropTypes.number, \r\n  contentType: PropTypes.string, \r\n  subheadline: PropTypes.string, \r\n  headlineLine1: PropTypes.string, \r\n  headlineLine2: PropTypes.string, \r\n  headlineLine3: PropTypes.string, \r\n  headlineLine4: PropTypes.string, \r\n  headlineLine5: PropTypes.string, \r\n  headlineSize: PropTypes.string,\r\n  displayLine: PropTypes.string, \r\n  displayLineSize: PropTypes.string,\r\n  displayLinePosition: PropTypes.string,\r\n  callToAction: PropTypes.string,\r\n};\r\n\r\nApp.defaultProps = {\r\n  width:2400,\r\n  height:1260, \r\n  theme: 4,\r\n  contentType: \"heading-2\", \r\n  subheadline: \"\", \r\n  headlineLine1: \"How to drive machine\", \r\n  headlineLine2: \"platform that lets you\", \r\n  headlineLine3: \"\", \r\n  headlineLine4: \"\", \r\n  headlineLine5: \"\",\r\n  headlineSize: \"1\",\r\n  displayLine: \"\", \r\n  displayLineSize: \"1\",\r\n  displayLinePosition: \"bottom\",\r\n  callToAction: \"Watch\",\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfunction temp(){\r\n  //var node = ReactDOM.findDOMNode(document.getElementById(\"root\"));\r\n  //console.log(node.querySelector(\"#test\"))\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App {...window.templateProps} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n  temp()\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}