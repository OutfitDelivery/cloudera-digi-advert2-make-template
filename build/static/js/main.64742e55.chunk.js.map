{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","contentType","subheadline","headline","headlineSize","callToAction","appStyle","placeholderBkg","backgroundImage","conditionalTextCheck","text","classList","className","data-headline-size","style","data-width","data-height","data-text-type","ref","el","elHeight","parseInt","window","getComputedStyle","paddingTop","paddingBottom","maxheight","maxHeight","defaultProps","Boolean","location","hostname","match","ReactDOM","render","StrictMode","templateProps","document","getElementById","temp","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAKA,SAASA,EAAT,GACmF,IAAjFC,EAAgF,EAAhFA,MAAOC,EAAyE,EAAzEA,OAAQC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,aAEzDC,EAAW,CACfP,MAAM,GAAD,OAAKA,EAAL,MACLC,OAAO,GAAD,OAAKA,EAAL,OAGFO,EAAiB,CACrBC,gBAAgB,oHAAD,OAAsHT,EAAM,EAA5H,YAAiIC,EAAO,EAAxI,UAIjB,SAASS,EAAqBC,EAAMC,GAelC,OAdAA,GAAa,WAcN,yBAAKC,UAAWD,GAAYD,GA2BvC,OAZF,yBAAKG,qBAAoBT,GACnB,yBAAKQ,UAAU,MAAME,MAAOR,EAAUS,aAAYhB,EAAM,EAAGiB,cAAahB,EAAO,GACzE,yBAAKY,UAAU,cAAcE,MAAOP,IACpC,yBAAKK,UAAU,YAAYK,iBAAgBhB,EAAaiB,IAAK,SAAAC,GAAE,OAfvE,SAAmBA,GACjB,KAAgB,OAAVpB,GAA6B,MAAXC,GAA8B,OAAVD,GAA6B,MAAXC,GAAiB,CAC7E,IAAIoB,EAAWC,SAASC,OAAOC,iBAAiBJ,GAAInB,QAAUqB,SAASC,OAAOC,iBAAiBJ,GAAIK,YAAcH,SAASC,OAAOC,iBAAiBJ,GAAIM,eAClJC,EAAYJ,OAAOC,iBAAiBJ,GAAIQ,UACzCN,SAASD,IAAaC,SAASK,KAChCP,EAAGP,UAAY,uBAUoDe,CAAUR,KACxEV,EAAqB,4BAAKP,GAAmB,eAC7CO,EAAqB,4BAAI,8BAAON,IAAuB,YACvDM,EAAqB,2BAAIJ,GAAmB,qBAmB3DP,EAAI8B,aAAe,CACjB7B,MAAM,KACNC,OAAO,KACPC,YAAa,WACbC,YAAa,OACbC,SAAU,oDACVC,aAAc,IACdC,aAAc,SAIDP,QCxEK+B,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAQb,OAAOc,gBAElBC,SAASC,eAAe,aACxBC,GDmHI,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64742e55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./css/App.scss\";\r\n\r\n\r\nfunction App({\r\n  width, height, contentType, subheadline, headline, headlineSize, callToAction}) {\r\n    \r\n    const appStyle = {\r\n      width: `${width}px`,\r\n      height: `${height}px`,\r\n    };\r\n\r\n    const placeholderBkg = {\r\n      backgroundImage: `url(https://cdn.jsdelivr.net/gh/OutfitDelivery/cloudera-digi-advert1-make-template@master/src/assets/Placeholder/${width/4}x${height/4}.png)`,\r\n    };\r\n\r\n    //Checks to see if text has content and adds breaks if [break] exists\r\n    function conditionalTextCheck(text, classList){\r\n      classList += \" text-el\";\r\n      /*let textChild = text.props.children;\r\n      try{textChild = textChild.props.children} catch(e){}\r\n\r\n      if(textChild === \"\" || textChild === \"null\") return \"\";\r\n\r\n      //Update [break] to <br>\r\n      textChild = textChild.split(\"[break]\").join(\"<br>\");\r\n      if((text.props.children).props === undefined){\r\n        text.props.children = textChild;\r\n      } else{\r\n        (text.props.children).props.children = textChild;\r\n      }\r\n      */\r\n      return <div className={classList}>{text}</div>;\r\n    }\r\n\r\n    function maxHeight(el){\r\n      if(!((width === 1280 && height === 200) || (width === 1200 && height === 200))){\r\n        let elHeight = parseInt(window.getComputedStyle(el).height) - parseInt(window.getComputedStyle(el).paddingTop) - parseInt(window.getComputedStyle(el).paddingBottom);\r\n        let maxheight = window.getComputedStyle(el).maxHeight;\r\n        if(parseInt(elHeight) >= parseInt(maxheight)){\r\n          el.className = \"overflow text-area\";\r\n        }\r\n      }\r\n    }\r\n\r\n    var htmlStructure = (\r\n\r\n<div data-headline-size={headlineSize}>\r\n      <div className=\"App\" style={appStyle} data-width={width/4} data-height={height/4}>\r\n            <div className=\"placeholder\" style={placeholderBkg}></div>\r\n            <div className=\"text-area\" data-text-type={contentType} ref={el=>maxHeight(el)}>\r\n              {conditionalTextCheck(<h2>{subheadline}</h2>, \"subheadline\")}\r\n              {conditionalTextCheck(<h1><span>{headline}</span></h1>, \"headline\")}\r\n              {conditionalTextCheck(<p>{callToAction}</p>, \"call-to-action\")}\r\n          </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  \r\n  return htmlStructure;\r\n}\r\n\r\nApp.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number, \r\n  contentType: PropTypes.string, \r\n  subheadline: PropTypes.string, \r\n  headline: PropTypes.string, \r\n  headlineSize: PropTypes.string,\r\n  callToAction: PropTypes.string,\r\n};\r\n\r\nApp.defaultProps = {\r\n  width:2400,\r\n  height:1260, \r\n  contentType: \"headline\", \r\n  subheadline: \"TEST\", \r\n  headline: \"How to drive machine[break]platform that lets you\", \r\n  headlineSize: \"1\",\r\n  callToAction: \"Watch\",\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nfunction temp(){\n  //var node = ReactDOM.findDOMNode(document.getElementById(\"root\"));\n  //console.log(node.querySelector(\"#test\"))\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App {...window.templateProps} />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n  temp()\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}