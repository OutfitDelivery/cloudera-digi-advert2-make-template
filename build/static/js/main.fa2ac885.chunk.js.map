{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","contentType","subheadline","headline","headlineSize","callToAction","logoLockUp","placeholderBkg","logoLockUpSize","backgroundImage","appStyle","formatTags","text","dangerouslySetInnerHTML","__html","replaceAll","formatAll","conditionalTextCheck","classList","className","data-headline-size","style","data-width","data-height","data-text-type","ref","el","elHeight","parseInt","window","getComputedStyle","paddingTop","paddingBottom","maxheight","maxHeight","defaultProps","Boolean","location","hostname","match","ReactDOM","render","StrictMode","templateProps","document","getElementById","temp","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAIA,SAASA,EAAT,GAC+G,IAA7GC,EAA4G,EAA5GA,MAAOC,EAAqG,EAArGA,OAAQC,EAA6F,EAA7FA,YAAaC,EAAgF,EAAhFA,YAAaC,EAAmE,EAAnEA,SAAUC,EAAyD,EAAzDA,aAAcC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,WAEvEC,GAFoG,EAAjBC,eAElE,CACrBC,gBAAgB,oHAAD,OAAsHV,EAAM,EAA5H,YAAiIC,EAAO,EAAxI,WAGXU,EAAW,CACfX,MAAM,GAAD,OAAKA,EAAL,MACLC,OAAO,GAAD,OAAKA,EAAL,OAGFW,EAAa,SAACC,GAQlB,OAAO,yBAAKC,wBANI,SAACD,GAIf,MAAO,CAACE,OADRF,GADAA,EAAOA,EAAKG,WADK,4BACkB,wBACvBA,WAAW,UAAW,UAGEC,CAAUJ,MAIlD,SAASK,EAAqBL,EAAMM,GAElC,OADAA,GAAa,WACN,yBAAKC,UAAWD,GAAYN,GA4BvC,OAbF,yBAAKQ,qBAAoBhB,GACnB,yBAAKe,UAAU,MAAME,MAAOX,EAAUY,aAAYvB,EAAM,EAAGwB,cAAavB,EAAO,GACzE,yBAAKmB,UAAU,cAAcE,MAAOd,IACpC,yBAAKY,UAAU,YAAYK,iBAAgBvB,EAAawB,IAAK,SAAAC,GAAE,OAfvE,SAAmBA,GACjB,KAAgB,OAAV3B,GAA6B,MAAXC,GAA8B,OAAVD,GAA6B,MAAXC,GAAiB,CAC7E,IAAI2B,EAAWC,SAASC,OAAOC,iBAAiBJ,GAAI1B,QAAU4B,SAASC,OAAOC,iBAAiBJ,GAAIK,YAAcH,SAASC,OAAOC,iBAAiBJ,GAAIM,eAClJC,EAAYJ,OAAOC,iBAAiBJ,GAAIQ,UACzCN,SAASD,IAAaC,SAASK,KAChCP,EAAGP,UAAY,uBAUoDe,CAAUR,KACxET,EAAqB,6BAAON,EAAWL,IAAqB,cAC5DW,EAAqB,4BAAMN,EAAWT,IAAqB,eAC3De,EAAqB,4BAAI,8BAAQN,EAAWR,KAAyB,YACrEc,EAAqB,6BAAK,8BAAOZ,IAA4B,qBAqB5EP,EAAIqC,aAAe,CACjBpC,MAAM,KACNC,OAAO,KACPC,YAAa,aACbC,YAAa,kBACbC,SAAU,+EACVC,aAAc,IACdC,aAAc,WACdC,WAAY,YACZE,eAAgB,KAIHV,QC1EKsC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAQb,OAAOc,gBAElBC,SAASC,eAAe,aACxBC,GDmHI,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa2ac885.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./css/App.scss\";\r\n\r\nfunction App({\r\n  width, height, contentType, subheadline, headline, headlineSize, callToAction, logoLockUp, logoLockUpSize}) {\r\n    \r\n    const placeholderBkg = {\r\n      backgroundImage: `url(https://cdn.jsdelivr.net/gh/OutfitDelivery/cloudera-digi-advert2-make-template@master/src/assets/Placeholder/${width/4}x${height/4}.png)`,\r\n    };\r\n\r\n    const appStyle = {\r\n      width: `${width}px`,\r\n      height: `${height}px`,\r\n    };\r\n\r\n    const formatTags = (text) => {\r\n      /* [break] */\r\n      let formatAll = (text)=>{\r\n        var bold_regex = /\\[bold\\](.*?)\\[\\/bold\\]/gi;\r\n        text = text.replaceAll(bold_regex, \"<strong>$1</strong>\");\r\n        text = text.replaceAll(\"[break]\", \"<br/>\");\r\n        return {__html: text}\r\n      }\r\n      return <div dangerouslySetInnerHTML={ formatAll(text) }></div>;\r\n    }\r\n\r\n    //Checks to see if text has content and adds breaks if [break] exists\r\n    function conditionalTextCheck(text, classList){\r\n      classList += \" text-el\";\r\n      return <div className={classList}>{text}</div>;\r\n    }\r\n\r\n    function maxHeight(el){\r\n      if(!((width === 1280 && height === 200) || (width === 1200 && height === 200))){\r\n        let elHeight = parseInt(window.getComputedStyle(el).height) - parseInt(window.getComputedStyle(el).paddingTop) - parseInt(window.getComputedStyle(el).paddingBottom);\r\n        let maxheight = window.getComputedStyle(el).maxHeight;\r\n        if(parseInt(elHeight) >= parseInt(maxheight)){\r\n          el.className = \"overflow text-area\";\r\n        }\r\n      }\r\n    }\r\n\r\n    var htmlStructure = (\r\n\r\n<div data-headline-size={headlineSize}>\r\n      <div className=\"App\" style={appStyle} data-width={width/4} data-height={height/4}>\r\n            <div className=\"placeholder\" style={placeholderBkg}></div>\r\n            <div className=\"text-area\" data-text-type={contentType} ref={el=>maxHeight(el)}>\r\n              {conditionalTextCheck(<div>{ formatTags(logoLockUp) }</div>, \"logoLockUp\")}\r\n              {conditionalTextCheck(<h2>{ formatTags(subheadline) }</h2>, \"subheadline\")}\r\n              {conditionalTextCheck(<h1><span>{ formatTags(headline) }</span></h1>, \"headline\")}\r\n              {conditionalTextCheck(<div><span>{callToAction}</span></div>, \"call-to-action\")}\r\n          </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  \r\n  return htmlStructure;\r\n}\r\n\r\nApp.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number, \r\n  contentType: PropTypes.string, \r\n  subheadline: PropTypes.string, \r\n  headline: PropTypes.string, \r\n  headlineSize: PropTypes.number,\r\n  callToAction: PropTypes.string,\r\n  logoLockUp: PropTypes.string,\r\n  logoLockUpSize: PropTypes.number\r\n};\r\n\r\nApp.defaultProps = {\r\n  width:2400,\r\n  height:1260, \r\n  contentType: \"logoLockUp\", \r\n  subheadline: \"Forrester study\", \r\n  headline: \"USE REAL-TIME STREAMING[break]DATA TO MAKE CRITICAL[break]BUSINESS DECISIONS\", \r\n  headlineSize: 100,\r\n  callToAction: \"READ NOW\",\r\n  logoLockUp: \"On Demand\",\r\n  logoLockUpSize: 100\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfunction temp(){\r\n  //var node = ReactDOM.findDOMNode(document.getElementById(\"root\"));\r\n  //console.log(node.querySelector(\"#test\"))\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App {...window.templateProps} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n  temp()\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}